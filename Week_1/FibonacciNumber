//Fibonacci Number
/*

Problem Introduction
Recall the definition of Fibonacci sequence: 𝐹0 = 0, 𝐹1 = 1, and 𝐹𝑖 = 𝐹𝑖−1 + 𝐹𝑖−2 for 𝑖 ≥ 2. Your goal in this problem is to implement an efficient algorithm for computing Fibonacci numbers.

Problem Description
Task. Given an integer 𝑛, find the 𝑛th Fibonacci number 𝐹𝑛. 
Input Format. The input consists of a single integer 𝑛. 
Constraints. 0 ≤ 𝑛 ≤ 45.
Output Format. Output 𝐹𝑛.

*/

#include <iostream>
#include <cassert>
#include <vector>

using namespace std;

int fibonacci_naive(int n) {
    if (n <= 1)
        return n;

    return fibonacci_naive(n - 1) + fibonacci_naive(n - 2);
}

int fibonacci_fast(int n) {
    vector<int> fibonacci_sequence(n+1,0);
    /*for(int i=0;i<n+1;i++)
            cout<<fibonacci_sequence[i];*/
    fibonacci_sequence[0] = 0;
    fibonacci_sequence[1] = 1;
    for (int i=2;i<n+1;i++)
    {
        fibonacci_sequence[i] = fibonacci_sequence[i-1] + fibonacci_sequence[i-2];
    }
    return fibonacci_sequence[n];
}

void test_solution() {
    assert(fibonacci_fast(3) == 2);
    assert(fibonacci_fast(10) == 55);
    for (int n = 0; n < 20; ++n)
        assert(fibonacci_fast(n) == fibonacci_naive(n));
}

int main() {
    int n = 0;
    std::cin >> n;

    //std::cout << fibonacci_naive(n) << '\n';
    //test_solution();
    std::cout << fibonacci_fast(n) << '\n';
    return 0;
}
